#!/bin/bash
#
# keylaytog -- Toggle keyboard layout (us, us_intl)
#


main()
{
    layouts=(us us_intl)

    ensure_display_access
    
    # Get current setup
    cur_layout=$(setxkbmap -query | \grep layout | awk '{print $2}')
    
    # Cycle through layouts (equal to toggling for two options)
    # If current layout is not found, default to first
    n=${#layouts[@]}
    new_i=0
    for i in $(seq 0 $((n - 1)))
    do
        layout_i="${layouts[$i]}"
        if [ "${cur_layout}" == "${layout_i}" ]
        then
            # Current layout found: select next layout
            # If the current is the last, stick with the
            # first, otherwise select the next one
            [ ${i} -lt $((n - 1)) ] && new_i=$((i + 1))
            break
        fi
    done
    new_layout="${layouts[$new_i]}"
    
    printf "${cur_layout} -> ${new_layout}\n"
    
    setxkbmap -layout ${new_layout}
}


#
# Make sure there's access to display
#
ensure_display_access()
{
    check_display_available && return 0

    # Damn, no display access!

    # Assumption: Lost connection when reattaching to running
    # remote tmux session (without nested SSH connection).
    source tmux_update_display

    check_display_available && return 0

    # Damn, still no display access!

    echo "$(basename ${0}): Cannot open display '${DISPLAY}'" >&2
    exit 255
}


#
# Check whether access to display is available
#
check_display_available()
{
    # Set test command (optional arguments, otherwise default)
    local cmd="setxkbmap"
    [ ${#} -gt 0 ] && cmd="${@}"

    # Runn test command, storing sterr
    local err=$(setxkbmap 2>&1 >/dev/null)

    # Assumption: no error message if display works, otherwise error message
    if [ "${err}" == '' ]
    then
        return 0
    elif [ "${err:0:19}" == "Cannot open display" ]
    then
        return 255
    else
        echo "check_display_available: unexpected error running ${cmd}: ${err}">&2
        exit 1
    fi
}


main "${@}"
